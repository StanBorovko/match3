{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/constants.js",
    "src/index.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "//Game field view size\r\nexport const GAME_WIGTH = 960;\r\nexport const GAME_HEIGHT = 1280;\r\nexport const OFFSET = GAME_HEIGHT - GAME_WIGTH;\r\n\r\n//Number of gems per column and per row\r\nexport const DONUTS_NUMBER = 10;\r\nexport const DONUT_SIZE = GAME_WIGTH / 10; //96\r\nexport const HALF_DONUT_SIZE = DONUT_SIZE / 2;\r\n\r\nexport const DONUTS = [\r\n        'gem-01', 'gem-02', 'gem-03', 'gem-04',\r\n        'gem-05', 'gem-06', 'gem-07', 'gem-08',\r\n        'gem-09', 'gem-10', 'gem-11', 'gem-12'\r\n    ];\r\n\r\nexport const SOUNDS = [\r\n        'select-1', 'select-2', 'select-3', 'select-4',\r\n        'select-5', 'select-6', 'select-7', 'select-8',\r\n        'select-9'\r\n    ];\r\n\r\nexport const DEFAULT_SELECTED_OBJ = {x: 0, y: 0, donut: null};\r\n\r\nexport const TEXT_COLOR_LILAC = '#e063f1';\r\nexport const TEXT_COLOR_WHITE = '#f1f1f1';\r\nexport const TEXT_STROKE = 10;\r\nexport const TEXT_STROKE_COLOR = '#1c1c1c';\r\n\r\nexport const SWAP_SPEED = 200;\r\nexport const DESTROY_SPEED = 400;\r\nexport const FALL_SPEED = 600;\r\n\r\n\r\n",
    "import * as C from './constants';\r\n\r\nconst game = new Phaser.Game(\r\n    C.GAME_WIGTH,\r\n    C.GAME_HEIGHT,\r\n    Phaser.CANVAS,\r\n    'match3',\r\n    {\r\n        preload: preload,\r\n        create: create\r\n    });\r\n\r\nconst WebFontConfig = {\r\n    google: {\r\n        families: [\"Fredoka One\"]\r\n    }\r\n};\r\n\r\n//Create game initial state\r\n//group of tasty donuts\r\nlet donuts, shadows;\r\n//group of user interface during game;\r\nlet gameUI;\r\n//inputEnabled: contain state - swaping donuts allowed or not\r\nlet inputEnabled = false;\r\n\r\nlet soundEnabled = false;\r\n\r\n//matrix contain image of game board\r\nlet matrix = [];\r\nlet shMatrix = [];\r\n\r\n//list of items for remove\r\nlet matchMap = [];\r\n\r\n//Add score\r\nlet score = 0,\r\n    textScore;\r\n\r\n//Reset target and selected donuts\r\nlet selected = null;\r\nlet selectedShadow = null;\r\nlet hand;\r\n\r\n//Add timer;\r\nlet timer,\r\n    textTimer;\r\n\r\nlet bgMusic;\r\n\r\nfunction preload() {\r\n    //Load all resources\r\n    //images\r\n    game.load.image('bg-score', 'assets/images/bg-score.png');\r\n    game.load.image('big-shadow', 'assets/images/big-shadow.png');\r\n    game.load.image('btn-play', 'assets/images/btn-play.png');\r\n    game.load.image('btn-sfx', 'assets/images/btn-sfx.png');\r\n    game.load.image('donut', 'assets/images/donut.png');\r\n    game.load.image('donuts_logo', 'assets/images/donuts_logo.png');\r\n    game.load.image('text-timeup', 'assets/images/text-timeup.png');\r\n\r\n    game.load.image('background', 'assets/images/backgrounds/background.jpg');\r\n\r\n    game.load.image('gem-01', 'assets/images/game/gem-01.png');\r\n    game.load.image('gem-02', 'assets/images/game/gem-02.png');\r\n    game.load.image('gem-03', 'assets/images/game/gem-03.png');\r\n    game.load.image('gem-04', 'assets/images/game/gem-04.png');\r\n    game.load.image('gem-05', 'assets/images/game/gem-05.png');\r\n    game.load.image('gem-06', 'assets/images/game/gem-06.png');\r\n    game.load.image('gem-07', 'assets/images/game/gem-07.png');\r\n    game.load.image('gem-08', 'assets/images/game/gem-08.png');\r\n    game.load.image('gem-09', 'assets/images/game/gem-09.png');\r\n    game.load.image('gem-10', 'assets/images/game/gem-10.png');\r\n    game.load.image('gem-11', 'assets/images/game/gem-11.png');\r\n    game.load.image('gem-12', 'assets/images/game/gem-12.png');\r\n    game.load.image('hand', 'assets/images/game/hand.png');\r\n    game.load.image('shadow', 'assets/images/game/shadow.png');\r\n    game.load.image('timer-png', 'assets/images/game/timer.png');\r\n\r\n    game.load.image('particle-1', 'assets/images/particles/particle-1.png');\r\n    game.load.image('particle-2', 'assets/images/particles/particle-2.png');\r\n    game.load.image('particle-3', 'assets/images/particles/particle-3.png');\r\n    game.load.image('particle-4', 'assets/images/particles/particle-4.png');\r\n    game.load.image('particle-5', 'assets/images/particles/particle-5.png');\r\n    game.load.image('particle_ex1', 'assets/images/particles/particle_ex1.png');\r\n    game.load.image('particle_ex2', 'assets/images/particles/particle_ex2.png');\r\n    game.load.image('particle_ex3', 'assets/images/particles/particle_ex3.png');\r\n\r\n    //music\r\n    game.load.audio('backgroundMp3', 'assets/audio/background.mp3');\r\n    game.load.audio('kill', 'assets/audio/kill.mp3');\r\n    game.load.audio('select-1', 'assets/audio/select-1.mp3');\r\n    game.load.audio('select-2', 'assets/audio/select-2.mp3');\r\n    game.load.audio('select-3', 'assets/audio/select-3.mp3');\r\n    game.load.audio('select-4', 'assets/audio/select-4.mp3');\r\n    game.load.audio('select-5', 'assets/audio/select-5.mp3');\r\n    game.load.audio('select-6', 'assets/audio/select-6.mp3');\r\n    game.load.audio('select-7', 'assets/audio/select-7.mp3');\r\n    game.load.audio('select-8', 'assets/audio/select-8.mp3');\r\n    game.load.audio('select-9', 'assets/audio/select-9.mp3');\r\n\r\n    //  Load the Google WebFont Loader script\r\n    game.load.script('webfont', '//ajax.googleapis.com/ajax/libs/webfont/1.4.7/webfont.js');\r\n}\r\n\r\nfunction create() {\r\n    //Game initialization\r\n\r\n    //Add background\r\n    let background = game.add.sprite(0, 0, 'background');\r\n    background.angle = 90;\r\n    background.x = C.GAME_WIGTH;\r\n\r\n    bgMusic = game.add.audio('backgroundMp3');\r\n    bgMusic.loop = true;\r\n    bgMusic.play();\r\n    if (!soundEnabled) {\r\n        bgMusic.stop();\r\n    }\r\n\r\n    let muteButton = game.add.button(20, 20, 'btn-sfx', () => {\r\n        toogleSound();\r\n    });\r\n    muteButton.width = 100;\r\n    muteButton.height = 100;\r\n\r\n\r\n    //Add main menu\r\n    createMainMenu();\r\n}\r\n\r\nfunction createMainMenu() {\r\n    let mainMenu = game.add.group();\r\n    const centerH = C.GAME_WIGTH / 2,\r\n        centerV = C.GAME_HEIGHT / 2;\r\n\r\n    //Add logo\r\n    let donutsLogo = game.add.image(centerH, 0, 'donuts_logo');\r\n    donutsLogo.anchor.setTo(0.5, 0);\r\n    mainMenu.add(donutsLogo);\r\n\r\n    //Add big donut bg\r\n    let bigDonutShadow = game.add.image(centerH, centerV, 'big-shadow');\r\n    bigDonutShadow.anchor.setTo(0.5);\r\n    mainMenu.add(bigDonutShadow);\r\n    let bigDonut = game.add.image(centerH, centerV, 'donut');\r\n    bigDonut.anchor.setTo(0.5);\r\n    mainMenu.add(bigDonut);\r\n\r\n    //Add play button\r\n    let playBtn = game.add.button(centerH, C.GAME_HEIGHT - 150, 'btn-play', () => {\r\n        mainMenu.destroy();\r\n        startGame();\r\n    });\r\n    playBtn.anchor.setTo(0.5);\r\n    playBtn.bringToTop();\r\n    mainMenu.add(playBtn);\r\n}\r\n\r\nfunction startGame() {\r\n    //gameplay\r\n    //start timer\r\n    timer = game.time.create(true);\r\n    timer.loop(10000, timeUp, this);\r\n    timer.start();\r\n\r\n    //Add UI elements\r\n    createUI();\r\n\r\n    //build board with donuts\r\n    createAllDonuts();\r\n    pauseGame();\r\n    resetMatchMap();\r\n\r\n    if (findAllMatches()) {\r\n        setTimeout(() => {\r\n            manageMatches();\r\n        },500);\r\n    }\r\n    resumeGame();\r\n\r\n    showTutorial();\r\n    //bind events on mouse btn up and down\r\n    game.input.onDown.add(onSelect, this);\r\n    game.input.onUp.add(onRelease, this);\r\n}\r\n\r\nfunction createUI() {\r\n    //All interface elements\r\n    gameUI = game.add.group();\r\n\r\n    //Score bg image\r\n    let bgScore = game.add.image(C.GAME_WIGTH / 2, 0, 'bg-score');\r\n    bgScore.anchor.setTo(0.5, 0);\r\n    gameUI.add(bgScore);\r\n\r\n    //Score label\r\n    textScore = game.add.text(C.GAME_WIGTH / 2 + 120, 60, score, {\r\n        font: \"Fredoka One\",\r\n        fontSize: \"65px\",\r\n        fill: C.TEXT_COLOR_WHITE,\r\n        align: \"right\"\r\n    });\r\n    textScore.anchor.setTo(1, 0);\r\n    gameUI.add(textScore);\r\n\r\n    //add timer bg image\r\n    let pngTimer = game.add.image(C.GAME_WIGTH - 50, 60, 'timer-png');\r\n    pngTimer.anchor.set(0.75, 0.25);\r\n    pngTimer.width = 150;\r\n    pngTimer.height = 150;\r\n    gameUI.add(pngTimer);\r\n\r\n\r\n    //Add timer label\r\n    textTimer = game.add.text(C.GAME_WIGTH - 50, 60,\r\n        showTimeInSeconds(timer),\r\n        {\r\n            font: \"Fredoka One\",\r\n            fontSize: \"65px\",\r\n            fill: C.TEXT_COLOR_LILAC,\r\n            align: \"right\",\r\n            strokeThickness: C.TEXT_STROKE,\r\n            stroke: C.TEXT_STROKE_COLOR\r\n        });\r\n    textTimer.anchor.set(1, 0);\r\n    textTimer.bringToTop();\r\n    setInterval(() => {\r\n        textTimer.text = showTimeInSeconds(timer);\r\n    }, 100);\r\n    gameUI.add(textTimer);\r\n\r\n    hand = game.add.sprite(0, 0, 'hand');\r\n    hand.anchor.set(0.5);\r\n    hand.visible = false;\r\n    gameUI.add(hand);\r\n}\r\n\r\nfunction createAllDonuts() {\r\n    //First spawn of donuts\r\n    shadows = game.add.group();\r\n    donuts = game.add.group();\r\n    pauseGame();\r\n\r\n    for (let i = 0; i < C.DONUTS_NUMBER; i++) {\r\n        matrix[i] = [];\r\n        shMatrix[i] = [];\r\n        for (let j = 0; j < C.DONUTS_NUMBER; j++) {\r\n            crateShadow(i, j);\r\n            createDonut(i, j);\r\n        }\r\n    }\r\n    donuts.x = C.HALF_DONUT_SIZE;\r\n    donuts.y = C.OFFSET + C.HALF_DONUT_SIZE;\r\n    shadows.x = C.HALF_DONUT_SIZE;\r\n    shadows.y = C.OFFSET + C.HALF_DONUT_SIZE;\r\n    gameUI.add(donuts);\r\n    gameUI.add(shadows);\r\n    gameUI.bringToTop(donuts);\r\n    resumeGame();\r\n}\r\n\r\nfunction createDonut(i, j) {\r\n    let donutImage = getRandomDonut();\r\n    let startY = 0 - C.OFFSET - C.DONUT_SIZE,\r\n        endY = j * C.DONUT_SIZE;\r\n    let donut = donuts.create(i * C.DONUT_SIZE, startY, donutImage);\r\n    donut.anchor.set(0.5);\r\n    game.add.tween(donut).to({\r\n            y: endY\r\n        },\r\n        C.FALL_SPEED,\r\n        Phaser.Easing.Linear.None,\r\n        true);\r\n    matrix[i][j] = donut;\r\n}\r\n\r\nfunction crateShadow(i, j) {\r\n    let startY = 0 - C.OFFSET - C.DONUT_SIZE,\r\n        endY = j * C.DONUT_SIZE;\r\n    let shadow = shadows.create(i * C.DONUT_SIZE, startY, 'shadow');\r\n    shadow.anchor.set(0.5);\r\n    game.add.tween(shadow).to({\r\n            y: endY\r\n        },\r\n        C.FALL_SPEED,\r\n        Phaser.Easing.Linear.None,\r\n        true);\r\n    shMatrix[i][j] = shadow;\r\n}\r\n\r\nfunction resetMatchMap() {\r\n    //build new match map with no matches\r\n    matchMap = [];\r\n    for (let i = 0; i < C.DONUTS_NUMBER; i++) {\r\n        matchMap[i] = [];\r\n        for (let j = 0; j < C.DONUTS_NUMBER; j++) {\r\n            matchMap[i][j] = null;\r\n        }\r\n    }\r\n}\r\n\r\nfunction matchRow(i, j) {\r\n    //check match donut for every position in possible chain in row\r\n    let matchPos1, matchPos2, matchPos3;\r\n    if (isInRangeI(i + 2) && matrix[i][j] !== null && matrix[i + 1][j] !== null && matrix[i + 2][j] !== null) {\r\n        matchPos1 = matrix[i][j].key === matrix[i + 1][j].key && matrix[i][j].key === matrix[i + 2][j].key;\r\n    } else {\r\n        matchPos1 = false;\r\n    }\r\n\r\n    if (isInRangeI(i - 1) && isInRangeI(i + 1) && matrix[i][j] !== null && matrix[i + 1][j] !== null && matrix[i - 1][j] !== null) {\r\n        matchPos2 = matrix[i - 1][j].key === matrix[i][j].key && matrix[i][j].key === matrix[i + 1][j].key;\r\n    } else {\r\n        matchPos2 = false;\r\n    }\r\n    if (isInRangeI(i - 2) && matrix[i][j] !== null && matrix[i - 1][j] !== null && matrix[i - 2][j] !== null) {\r\n        matchPos3 = matrix[i - 2][j].key === matrix[i][j].key && matrix[i - 1][j].key === matrix[i][j].key;\r\n    } else {\r\n        matchPos3 = false;\r\n    }\r\n    return matchPos1 || matchPos2 || matchPos3;\r\n}\r\n\r\nfunction matchCol(i, j) {\r\n    //check match donut for every position in possible chain in column\r\n    let matchPos1, matchPos2, matchPos3;\r\n    if (isInRangeJ(j + 2) && matrix[i][j] !== null && matrix[i][j + 1] !== null && matrix[i][j + 2] !== null) {\r\n        matchPos1 = matrix[i][j].key === matrix[i][j + 1].key && matrix[i][j].key === matrix[i][j + 2].key;\r\n    }\r\n    if (isInRangeJ(j - 1) && isInRangeJ(j + 1) && matrix[i][j] !== null && matrix[i][j + 1] !== null && matrix[i][j - 1] !== null) {\r\n        matchPos2 = matrix[i][j - 1].key === matrix[i][j].key && matrix[i][j].key === matrix[i][j + 1].key;\r\n    } else {\r\n        matchPos2 = false;\r\n    }\r\n    if (isInRangeJ(j - 2) && matrix[i][j] !== null && matrix[i][j - 1] !== null && matrix[i][j - 2] !== null) {\r\n        matchPos3 = matrix[i][j - 2].key === matrix[i][j].key && matrix[i][j - 1].key === matrix[i][j].key;\r\n    } else {\r\n        matchPos3 = false;\r\n    }\r\n    return matchPos1 || matchPos2 || matchPos3;\r\n}\r\n\r\nfunction match(i, j) {\r\n    return matchRow(i, j) || matchCol(i, j);\r\n}\r\n\r\nfunction findAllMatches() {\r\n    let matches = false;\r\n    for (let i = 0; i < C.DONUTS_NUMBER; i++) {\r\n        for (let j = 0; j < C.DONUTS_NUMBER; j++) {\r\n            if (match(i, j)) {\r\n                matchMap[i][j] = matrix[i][j];\r\n                matches = true\r\n            }\r\n        }\r\n    }\r\n    return matches;\r\n}\r\n\r\nfunction manageMatches() {\r\n    resetMatchMap();\r\n    if (findAllMatches()) {\r\n        killAll();\r\n    }\r\n    resumeGame();\r\n}\r\n\r\nfunction kill(i, j) {\r\n    let killAnimation = game.add.tween(matrix[i][j]).to({\r\n            alpha: 0\r\n        },\r\n        C.DESTROY_SPEED,\r\n        Phaser.Easing.Linear.None,\r\n        true);\r\n    game.add.tween(shMatrix[i][j]).to({\r\n            alpha: 0\r\n        },\r\n        C.DESTROY_SPEED,\r\n        Phaser.Easing.Linear.None,\r\n        true);\r\n    matrix[i][j].destroy();\r\n    shMatrix[i][j].destroy();\r\n    matrix[i][j] = null;\r\n    shMatrix[i][j] = null;\r\n}\r\n\r\nfunction killAll() {\r\n    for (let i = 0; i < C.DONUTS_NUMBER; i++) {\r\n        for (let j = 0; j < C.DONUTS_NUMBER; j++) {\r\n            if (matchMap[i][j] !== null) {\r\n                kill(i, j);\r\n            }\r\n        }\r\n    }\r\n    /*matchMap.forEach(row => {\r\n        row.forEach(donut => {\r\n            if (donut !== null) {\r\n                donut.destroy();\r\n            }\r\n        });\r\n    });*/\r\n    playSound('kill');\r\n    fallAll();\r\n}\r\n\r\nfunction fall(i0) {\r\n    let fallingFactor = 0; //how much holes donut should fall\r\n    for (let j = C.DONUTS_NUMBER - 1; j >= 0; j--) {\r\n        let fallingDonut = matrix[i0][j];\r\n        let fallingShadow = shMatrix[i0][j];\r\n\r\n        if (fallingDonut !== null) {\r\n            game.add.tween(fallingDonut).to({\r\n                    y: (j + fallingFactor) * C.DONUT_SIZE\r\n                },\r\n                C.FALL_SPEED,\r\n                Phaser.Easing.Linear.None,\r\n                true);\r\n            game.add.tween(fallingShadow).to({\r\n                    y: (j + fallingFactor) * C.DONUT_SIZE\r\n                },\r\n                C.FALL_SPEED,\r\n                Phaser.Easing.Linear.None,\r\n                true);\r\n        } else {\r\n            fallingFactor++;\r\n        }\r\n\r\n    }\r\n}\r\n\r\nfunction fallAll() {\r\n    for (let i = 0; i < C.DONUTS_NUMBER; i++) {\r\n        let fallingHeight = getFallingHeight(i);\r\n        if (fallingHeight) {\r\n            fall(i);\r\n        }\r\n    }\r\n    matrixCorrection(matrix);\r\n    matrixCorrection(shMatrix);\r\n    respawnAll();\r\n}\r\n\r\nfunction getFallingHeight(i) {\r\n    //Count how many holes donuts should fall\r\n    return matrix[i].filter(donut => donut === null).length;\r\n}\r\n\r\nfunction respawn(i, j) {\r\n    crateShadow(i, j);\r\n    createDonut(i, j);\r\n}\r\n\r\nfunction respawnAll() {\r\n    for (let i = 0; i < C.DONUTS_NUMBER; i++) {\r\n        for (let j = 0; j < C.DONUTS_NUMBER; j++) {\r\n            if (matrix[i][j] === null) {\r\n                respawn(i, j);\r\n            }\r\n        }\r\n    }\r\n    resetMatchMap();\r\n}\r\n\r\nfunction matrixCorrection(matrix) {\r\n    for (let i = 0; i < C.DONUTS_NUMBER; i++) {\r\n        let nulls = matrix[i].filter(donut => donut === null),\r\n            donuts = matrix[i].filter(donut => donut !== null);\r\n        matrix[i] = [...nulls, ...donuts];\r\n    }\r\n}\r\n\r\nfunction onSelect(pointer) {\r\n    let pointerY = pointer.y - (C.OFFSET);\r\n    let pointerX = pointer.x;\r\n    if (inputEnabled) {\r\n        let j = Math.floor((pointerY) / C.DONUT_SIZE),\r\n            i = Math.floor((pointerX) / C.DONUT_SIZE);\r\n        if (isInRange(i, j)) {\r\n            let pointed = matrix[i][j],\r\n                pointedShadow = shMatrix[i][j];\r\n            console.log('pointed',pointed.key, i, j);\r\n            /*if (areSame(selected, pointed)) {\r\n                //if pointed donut already select, clear selection\r\n                selected.scale.setTo(1);\r\n                selectedShadow.scale.setTo(1);\r\n                selected = null;\r\n                selectedShadow = null;\r\n            } else*/ if (areNeighbors(selected, pointed)) {\r\n                //if donuts are neighbors, swap them\r\n                selected.scale.setTo(1);\r\n                selectedShadow.scale.setTo(1);\r\n                swap(selected, pointed, true);\r\n                // clearSelection();\r\n            } else if (selected === null) {\r\n                //choose pointed donut\r\n                selected = pointed;\r\n                selectedShadow = pointedShadow;\r\n\r\n                selected.scale.setTo(1.2);\r\n                selectedShadow.scale.setTo(1.2);\r\n                selected.bringToTop();\r\n\r\n                let sound = getRandomSound();\r\n                playSound(sound);\r\n                // game.input.addMoveCallback(move, this)\r\n            } else {\r\n                //clear selection\r\n                clearSelection();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction clearSelection() {\r\n    selected.scale.setTo(1);\r\n    selectedShadow.scale.setTo(1);\r\n    selected = null;\r\n    selectedShadow = null;\r\n}\r\n\r\nfunction isInRangeI(i) {\r\n    return i >= 0 && i < C.DONUTS_NUMBER;\r\n}\r\n\r\nfunction isInRangeJ(j) {\r\n    return j >= 0 && j < C.DONUTS_NUMBER;\r\n}\r\n\r\nfunction isInRange(i, j) {\r\n    return isInRangeI(i) && isInRangeJ(j);\r\n}\r\n\r\nfunction isNull(selected) {\r\n    return selected === null;\r\n}\r\n\r\nfunction areSame(selected, pointed) {\r\n    if (isNull(selected) || isNull(pointed)) {\r\n        return false;\r\n    } else {\r\n        return getI(selected) === getI(pointed) && getJ(selected) === getJ(pointed);\r\n    }\r\n}\r\n\r\nfunction areNeighbors(selected, pointed) {\r\n    if (isNull(selected) || isNull(pointed)) {\r\n        return false;\r\n    } else {\r\n        let iS = getI(selected), jS = getJ(selected),\r\n            iP = getI(pointed), jP = getJ(pointed),\r\n            isNeighborsByI = Math.abs(iS - iP) === 1 && jS === jP,\r\n            isNeighborsByJ = Math.abs(jS - jP) === 1 && iS === iP;\r\n        return isNeighborsByI || isNeighborsByJ;\r\n    }\r\n}\r\n\r\n\r\nfunction getJ(donut) {\r\n    return Math.floor(donut.y / C.DONUT_SIZE);\r\n}\r\n\r\nfunction getI(donut) {\r\n    return Math.floor(donut.x / C.DONUT_SIZE);\r\n}\r\n\r\nfunction onRelease() {\r\n    game.input.deleteMoveCallback(move, this);\r\n}\r\n\r\nfunction move(event, pX, pY) {\r\n    //action on pointer moving\r\n    if (event.id === 0) {\r\n        let dX = pX - selected.x,\r\n            dY = pY - selected.y - C.OFFSET,\r\n            dI = 0,\r\n            dJ = 0;\r\n        if (Math.abs(dX) > C.HALF_DONUT_SIZE) {\r\n            dJ = (dX > 0) ? 1 : -1;\r\n        } else if (Math.abs(dY) > C.HALF_DONUT_SIZE) {\r\n            dI = (dY > 0) ? 1 : -1;\r\n        }\r\n        if (dI - dJ !== 0) {\r\n            //try to swap donuts\r\n            let pointedI = getI(selected) + dI,\r\n                pointedJ = getJ(selected) + dJ;\r\n            if (isInRange(pointedI, pointedJ)) {\r\n                let pointed = matrix[pointedI][pointedJ];\r\n                selected.scale.setTo(1);\r\n                selectedShadow.scale.setTo(1);\r\n                let sound = getRandomSound();\r\n                playSound(sound);\r\n                swap(selected, pointed, true);\r\n                game.input.deleteMoveCallback(move, this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction swap(selected, pointed, swapBack) {\r\n    //swapping donuts\r\n    pauseGame();\r\n    let iS = getI(selected), jS = getJ(selected),\r\n        iP = getI(pointed), jP = getJ(pointed),\r\n        pointedShadow = shMatrix[iP][jP];\r\n    matrix[iS][jS] = pointed;\r\n    matrix[iP][jP] = selected;\r\n    shMatrix[iS][jS] = pointedShadow;\r\n    shMatrix[iP][jP] = selectedShadow;\r\n    game.add.tween(matrix[iS][jS]).to({\r\n            x: iS * C.DONUT_SIZE,\r\n            y: jS * C.DONUT_SIZE\r\n        },\r\n        C.SWAP_SPEED,\r\n        Phaser.Easing.Linear.None,\r\n        true);\r\n    let donut2Tween = game.add.tween(matrix[iP][jP]).to({\r\n            x: iP * C.DONUT_SIZE,\r\n            y: jP * C.DONUT_SIZE\r\n        },\r\n        C.SWAP_SPEED,\r\n        Phaser.Easing.Linear.None,\r\n        true);\r\n    game.add.tween(shMatrix[iS][jS]).to({\r\n            x: iS * C.DONUT_SIZE,\r\n            y: jS * C.DONUT_SIZE\r\n        },\r\n        C.SWAP_SPEED,\r\n        Phaser.Easing.Linear.None,\r\n        true);\r\n    game.add.tween(shMatrix[iP][jP]).to({\r\n            x: iP * C.DONUT_SIZE,\r\n            y: jP * C.DONUT_SIZE\r\n        },\r\n        C.SWAP_SPEED,\r\n        Phaser.Easing.Linear.None,\r\n        true);\r\n    //after animation complete match donuts\r\n    donut2Tween.onComplete.add(() => {\r\n        let thereAreMatches = match(iP, jP);\r\n        if (!thereAreMatches && swapBack) {\r\n            swap(selected, pointed, false);\r\n        } else {\r\n            if (thereAreMatches) {\r\n                manageMatches();\r\n                updateTimer(5);\r\n                updateScore();\r\n            } else {\r\n                resumeGame();\r\n                selected = null;\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n\r\n}\r\n\r\nfunction pauseGame() {\r\n    inputEnabled = false;\r\n    timer.pause();\r\n}\r\n\r\nfunction resumeGame() {\r\n    inputEnabled = true;\r\n    timer.resume();\r\n}\r\n\r\nfunction stopGame() {\r\n    timer.stop();\r\n    inputEnabled = false;\r\n}\r\n\r\nfunction updateScore() {\r\n    score++;\r\n    textScore.text = score;\r\n}\r\n\r\nfunction updateTimer(seconds) {\r\n    let newDuration = timer.duration + seconds * 1000;\r\n    timer.stop();\r\n    timer.loop(newDuration, timeUp, this);\r\n    timer.start();\r\n}\r\n\r\nfunction playSound(sound) {\r\n    if (soundEnabled) {\r\n        let playingSound = game.add.audio(sound);\r\n        playingSound.play();\r\n    }\r\n}\r\n\r\nfunction toogleSound() {\r\n    if (soundEnabled) {\r\n        soundEnabled = false;\r\n        bgMusic.stop();\r\n    } else {\r\n        soundEnabled = true;\r\n        bgMusic.play();\r\n    }\r\n}\r\n\r\nfunction getRandomSound() {\r\n    const randomSound = Math.floor(Math.random() * (C.SOUNDS.length));\r\n    return C.SOUNDS[randomSound];\r\n}\r\n\r\nfunction timeUp() {\r\n    console.log('time up!');\r\n    stopGame();\r\n    game.add.tween(gameUI).to({\r\n            alpha: 0\r\n        },\r\n        1000,\r\n        Phaser.Easing.Linear.None,\r\n        true);\r\n    let timeup = game.add.image(C.GAME_WIGTH / 2, C.GAME_HEIGHT / 2, 'text-timeup');\r\n    timeup.anchor.set(0.5);\r\n    showGameOver();\r\n}\r\n\r\nfunction showGameOver() {\r\n    let gameOver = game.add.text(C.GAME_WIGTH / 2, C.GAME_HEIGHT / 2 + 300,\r\n        `Game is over, your score is ${score}`,\r\n        {\r\n            font: \"Fredoka One\",\r\n            fontSize: \"65px\",\r\n            fontWeight: \"bold\",\r\n            strokeThickness: C.TEXT_STROKE,\r\n            stroke: C.TEXT_STROKE_COLOR,\r\n            fill: C.TEXT_COLOR_WHITE,\r\n            align: \"right\"\r\n        });\r\n    gameOver.anchor.set(0.5);\r\n}\r\n\r\nfunction showTimeInSeconds(timer) {\r\n    return Math.ceil(timer.duration / 1000);\r\n}\r\n\r\nfunction getRandomDonut() {\r\n    const randomDonut = Math.floor(Math.random() * (C.DONUTS.length));\r\n    return C.DONUTS[randomDonut];\r\n}\r\n\r\nfunction showTutorial() {\r\n    let matchFound = false;\r\n    for (let i = 0; i < C.DONUTS_NUMBER - 1; i++) {\r\n        for (let j = 0; j < C.DONUTS_NUMBER - 1; j++) {\r\n            tutorialSwap(i, j, i + 1, j);\r\n            if (findAllMatches()) {\r\n                hand.visible = true;\r\n                hand.x = matrix[i + 1][j].x + 16;\r\n                hand.y = matrix[i + 1][j].y + 70;\r\n                game.add.tween(hand).to({\r\n                    y: hand.y + 100\r\n                }, 500, Phaser.Easing.Linear.None, true, 0, -1, true);\r\n                matchFound = true;\r\n            }\r\n            tutorialSwap(i, j, i + 1, j);\r\n            if (matchFound) {\r\n                return;\r\n            }\r\n            tutorialSwap(i, j, i, j + 1);\r\n            if (findAllMatches()) {\r\n                hand.visible = true;\r\n                hand.x = matrix[i][j + 1].x + 16;\r\n                hand.y = matrix[i][j + 1].y + 70;\r\n                game.add.tween(hand).to({\r\n                    x: hand.x + 100\r\n                }, 500, Phaser.Easing.Linear.None, true, 0, -1, true);\r\n                matchFound = true;\r\n            }\r\n            tutorialSwap(i, j, i, j + 1);\r\n            if (matchFound) {\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    console.log(\"no match\");\r\n}\r\n\r\nfunction tutorialSwap(i1, j1, i2, j2) {\r\n    let tmp = matrix[i1][j1];\r\n    matrix[i1][j1] = matrix[i2][j2];\r\n    matrix[i2][j2] = tmp;\r\n}"
  ]
}