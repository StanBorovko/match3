{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/constants.js",
    "src/index.js",
    "src/states/GameState.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "//Game field view size\r\nexport const GAME_WIGTH = 960;\r\nexport const GAME_HEIGHT = 1280;\r\nexport const OFFSET = GAME_HEIGHT - GAME_WIGTH;\r\n\r\n//Number of gems per column and per row\r\nexport const DONUTS_NUMBER = 10;\r\nexport const DONUT_SIZE = GAME_WIGTH / 10; //96\r\nexport const HALF_DONUT_SIZE = DONUT_SIZE / 2;\r\n\r\nexport const DONUTS = [\r\n        'gem-01', 'gem-02', 'gem-03', 'gem-04',\r\n        'gem-05', 'gem-06', 'gem-07', 'gem-08',\r\n        'gem-09', 'gem-10', 'gem-11', 'gem-12'\r\n    ];\r\n\r\nexport const DEFAULT_SELECTED_OBJ = {x: 0, y: 0, donut: null};\r\n\r\n\r\nexport const DESTROY_SPEED = 100;\r\nexport const SWAP_SPEED = 100;\r\nexport const FALL_SPEED = 100;\r\n\r\n",
    "import GameState from 'src/states/GameState';\r\nimport {GAME_WIGTH, GAME_HEIGHT} from './constants';\r\n\r\nclass Game extends Phaser.Game {\r\n\r\n\tconstructor() {\r\n\t\tsuper(GAME_WIGTH, GAME_HEIGHT, Phaser.AUTO, 'match3', null);\r\n\t\tthis.state.add('GameState', GameState, false);\r\n\t\tthis.state.start('GameState');\r\n\t}\r\n\r\n}\r\n\r\nnew Game();\r\n",
    "import {\r\n    DONUTS_NUMBER,\r\n    GAME_WIGTH,\r\n    GAME_HEIGHT,\r\n    OFFSET,\r\n    DEFAULT_SELECTED_OBJ,\r\n    DONUT_SIZE,\r\n    HALF_DONUT_SIZE,\r\n    DONUTS,\r\n    DESTROY_SPEED,\r\n    SWAP_SPEED,\r\n    FALL_SPEED\r\n} from '../constants';\r\n\r\nclass GameState extends Phaser.State {\r\n\r\n    preload() {\r\n        //Load all resources\r\n        this.load.image('bg-score', 'assets/images/bg-score.png');\r\n        this.load.image('big-shadow', 'assets/images/big-shadow.png');\r\n        this.load.image('btn-play', 'assets/images/btn-play.png');\r\n        this.load.image('btn-sfx', 'assets/images/btn-sfx.png');\r\n        this.load.image('donut', 'assets/images/donut.png');\r\n        this.load.image('donuts_logo', 'assets/images/donuts_logo.png');\r\n        this.load.image('text-timeup', 'assets/images/text-timeup.png');\r\n\r\n        this.game.load.image('background', 'assets/images/backgrounds/background.jpg');\r\n\r\n        this.load.image('gem-01', 'assets/images/game/gem-01.png');\r\n        this.load.image('gem-02', 'assets/images/game/gem-02.png');\r\n        this.load.image('gem-03', 'assets/images/game/gem-03.png');\r\n        this.load.image('gem-04', 'assets/images/game/gem-04.png');\r\n        this.load.image('gem-05', 'assets/images/game/gem-05.png');\r\n        this.load.image('gem-06', 'assets/images/game/gem-06.png');\r\n        this.load.image('gem-07', 'assets/images/game/gem-07.png');\r\n        this.load.image('gem-08', 'assets/images/game/gem-08.png');\r\n        this.load.image('gem-09', 'assets/images/game/gem-09.png');\r\n        this.load.image('gem-10', 'assets/images/game/gem-10.png');\r\n        this.load.image('gem-11', 'assets/images/game/gem-11.png');\r\n        this.load.image('gem-12', 'assets/images/game/gem-12.png');\r\n        this.load.image('hand', 'assets/images/game/hand.png');\r\n        this.load.image('shadow', 'assets/images/game/shadow.png');\r\n\r\n        this.load.image('particle-1', 'assets/images/particles/particle-1.png');\r\n        this.load.image('particle-2', 'assets/images/particles/particle-2.png');\r\n        this.load.image('particle-3', 'assets/images/particles/particle-3.png');\r\n        this.load.image('particle-4', 'assets/images/particles/particle-4.png');\r\n        this.load.image('particle-5', 'assets/images/particles/particle-5.png');\r\n        this.load.image('particle_ex1', 'assets/images/particles/particle_ex1.png');\r\n        this.load.image('particle_ex2', 'assets/images/particles/particle_ex2.png');\r\n        this.load.image('particle_ex3', 'assets/images/particles/particle_ex3.png');\r\n\r\n        this.load.audio('backgroundMp3', 'assets/audio/background.mp3')\r\n    }\r\n\r\n    create() {\r\n        //Create game initial state\r\n\r\n        //Add background\r\n        let background = this.add.sprite(0, 0, 'background');\r\n        background.angle = 90;\r\n        background.x = GAME_WIGTH;\r\n\r\n        //Add main menu\r\n        this.createMainMenu();\r\n    }\r\n\r\n    createMainMenu() {\r\n        this.mainMenu = this.add.group();\r\n\r\n        //Add logo\r\n        let donutsLogo = this.add.image(GAME_WIGTH / 2, 0, 'donuts_logo');\r\n        donutsLogo.anchor.setTo(0.5, 0);\r\n        this.mainMenu.add(donutsLogo);\r\n\r\n        //Add play button\r\n        let playBtn = this.add.button(GAME_WIGTH / 2, GAME_HEIGHT / 2, 'btn-play', () => this.startGame());\r\n        playBtn.anchor.setTo(0.5);\r\n        this.mainMenu.add(playBtn);\r\n\r\n    }\r\n\r\n    startGame() {\r\n        this.mainMenu.destroy();\r\n\r\n        //inputEnabled: contain state - swaping donuts allowed or not\r\n        this.inputEnabled = true;\r\n\r\n        //flag of fast donuts falling\r\n        this.fastFall = false;\r\n\r\n        //matrix contain image of game board\r\n        this.matrix = [];\r\n\r\n        //list of items for remove\r\n        this.remove = [];\r\n\r\n        //Add score\r\n        this.score = 0;\r\n\r\n        //Add timer;\r\n        this.timer = this.time.create(true);\r\n        this.timer.loop(10000, this.timeUp, this);\r\n        this.timer.start();\r\n\r\n\r\n        //Reset target and selected donuts\r\n        this.selected = DEFAULT_SELECTED_OBJ;\r\n        this.target = DEFAULT_SELECTED_OBJ;\r\n\r\n        //Add UI elemetns\r\n        this.createUI();\r\n\r\n        //build board with donuts\r\n        this.createDonuts();\r\n        /*if (this.matchAll()) {\r\n            setTimeout(() => {this.handleMatches()}, 250)\r\n        }*/\r\n        this.handleMatches();\r\n\r\n        //bind events on mouse btn up and down\r\n        this.input.onDown.add(this.onSelect, this);\r\n        this.input.onUp.add(this.onRelease, this);\r\n\r\n        // console.log(this.donuts);\r\n    }\r\n\r\n    createUI() {\r\n        //All interface elements\r\n\r\n        //Score imege\r\n        let bgScore = this.add.image(GAME_WIGTH / 2, 0, 'bg-score');\r\n        bgScore.anchor.setTo(0.5, 0);\r\n        // bgScore.x = GAME_WIGTH / 2;\r\n\r\n        //Score label\r\n        this.textScore = this.add.text(GAME_WIGTH / 2 + 120, 60, this.score, {\r\n            font: \"65px Arial\",\r\n            fill: \"#ffe6b3\",\r\n            align: \"right\"\r\n        });\r\n        this.textScore.anchor.setTo(1, 0);\r\n\r\n        /*//score counter quick test\r\n        setInterval(() => {\r\n            this.score++;\r\n            textScore.text = this.score;\r\n        }, 1000);*/\r\n\r\n        //Add timer label\r\n        let timer = this.add.text(GAME_WIGTH - 50, 60,\r\n            GameState.showTimeInSeconds(this.timer),\r\n            {font: \"65px Arial\", fill: \"#6397ff\", align: \"right\"});\r\n        timer.anchor.set(1, 0);\r\n        setInterval(() => {\r\n            timer.text = GameState.showTimeInSeconds(this.timer);\r\n        }, 100);\r\n        // console.log('this.timer.duration',this.timer.duration);\r\n    }\r\n\r\n    createDonuts() {\r\n        //First spawn of donuts\r\n        this.donuts = this.add.group();\r\n\r\n        for (let i = 0; i < DONUTS_NUMBER; i++) {\r\n            this.matrix[i] = [];\r\n            for (let j = 0; j < DONUTS_NUMBER; j++) {\r\n                let donutImage = GameState.getRandomDonut();\r\n                let donut = this.donuts.create(i * DONUT_SIZE, j * DONUT_SIZE, donutImage);\r\n                donut.anchor.set(0.5);\r\n\r\n                this.matrix[i][j] = donut;\r\n            }\r\n        }\r\n        this.donuts.x = HALF_DONUT_SIZE;\r\n        this.donuts.y = OFFSET + HALF_DONUT_SIZE;\r\n    }\r\n\r\n    onSelect(pointer) {\r\n        //selection donut\r\n\r\n        // console.log('selected', pointer);\r\n        let pointerY = pointer.y - (OFFSET);\r\n        let pointerX = pointer.x;\r\n        if (this.inputEnabled) {\r\n            let j = Math.floor((pointerY) / DONUT_SIZE),\r\n                i = Math.floor((pointerX) / DONUT_SIZE),\r\n                pointed = this.getFromMatrix(i, j);\r\n            // console.log('pointed', i, j, pointed);\r\n            if (pointed !== -1) {\r\n                // console.log('this.selected',this.selected.donut);\r\n                if (this.selected.donut === null) {\r\n                    // console.log('this.selected.donut === null');\r\n                    pointed.scale.setTo(1.2);\r\n                    pointed.bringToTop();\r\n                    this.selected.donut = pointed;\r\n                    this.input.addMoveCallback(this.move, this);\r\n                } else {\r\n                    if (this.areSame(pointed, this.selected.donut)) {\r\n                        //if donut already selected, remove selection\r\n                        this.selected.donut.scale.setTo(1);\r\n                        this.selected.donut = null;\r\n                    } else {\r\n                        if (this.areNext(pointed, this.selected.donut)) {\r\n                            //if donuts are neighbors, swap them\r\n                            this.selected.donut.scale.setTo(1);\r\n                            this.swap(this.selected.donut, pointed, true);\r\n                        } else {\r\n                            //choose pointed donut\r\n                            this.selected.donut.scale.setTo(1);\r\n                            pointed.scale.setTo(1.2);\r\n                            this.selected.donut = pointed;\r\n                            this.input.addMoveCallback(this.move, this);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    areNext(donut1, donut2) {\r\n        //are donut1 and donut2 located in neighboring cells?\r\n        return Math.abs(this.getRow(donut1) - this.getRow(donut2)) +\r\n            Math.abs(this.getCol(donut1) - this.getCol(donut2)) === 1;\r\n    }\r\n\r\n    areSame(donut1, donut2) {\r\n        //are donut1 and 2 the same donut?\r\n        return this.getRow(donut1) === this.getRow(donut2) &&\r\n            this.getCol(donut1) === this.getCol(donut2);\r\n    }\r\n\r\n\r\n    getRow(donut) {\r\n        return Math.floor(donut.y / DONUT_SIZE);\r\n    }\r\n\r\n    getCol(donut) {\r\n        return Math.floor(donut.x / DONUT_SIZE);\r\n    }\r\n\r\n    onRelease() {\r\n        // console.log('released');\r\n        this.input.deleteMoveCallback(this.move, this);\r\n    }\r\n\r\n    move(event, pX, pY) {\r\n        //action on pointer moving\r\n        // console.log('move');\r\n        if (event.id === 0) {\r\n            let dX = pX - this.selected.donut.x,\r\n                dY = pY - this.selected.donut.y,\r\n                dI = 0,\r\n                dJ = 0;\r\n            if (Math.abs(dX) > HALF_DONUT_SIZE) {\r\n                dJ = (dX > 0)? 1 : -1;\r\n                /*if (dX > 0) {\r\n                    dJ = 1;\r\n                } else {\r\n                    dJ = -1;\r\n                }*/\r\n            } else {\r\n                if (Math.abs(dY) > HALF_DONUT_SIZE) {\r\n                    dI = (dY > 0)? 1 : -1;\r\n                    /*if (dY > 0) {\r\n                        dI = 1;\r\n                    } else {\r\n                        dI = -1;\r\n                    }*/\r\n                }\r\n            }\r\n            if (dI + dJ !== 0) {\r\n                //try to swap donuts\r\n                let pointed = this.getFromMatrix(this.getRow(this.selected.donut) + dI, this.getCol(this.selected.donut) + dJ);\r\n                // console.log('pointed', pointed, 'selected', this.selected.donut);\r\n                if (pointed !== -1) {\r\n                    this.selected.donut.scale.setTo(1);\r\n                    // console.log('pointed', pointed, 'selected', this.selected.donut);\r\n                    this.swap(this.selected.donut, pointed, true);\r\n                    // this.swap(pointed, this.selected, true);\r\n                    this.input.deleteMoveCallback(this.move, this);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    swap(donut1, donut2, swapBack) {\r\n        //swapping donuts\r\n        // console.log('swap');\r\n\r\n        // this.inputEnabled = false;\r\n        this.pauseGame();\r\n        // let fromColor = donut1.key;\r\n        let fromSprite = donut1;\r\n        // let toColor = donut2.key;\r\n        let toSprite = donut2;\r\n        // this.matrix[this.getRow(donut1)][this.getCol(donut1)].key = toColor;\r\n        this.matrix[this.getRow(donut1)][this.getCol(donut1)] = donut2;\r\n        // this.matrix[this.getRow(donut2)][this.getCol(donut2)].key = fromColor;\r\n        this.matrix[this.getRow(donut2)][this.getCol(donut2)] = donut1;\r\n        //swap animation\r\n        let donut1Tween = this.add.tween(\r\n            this.matrix[this.getRow(donut1)][this.getCol(donut1)]).to({\r\n                x: this.getCol(donut1) * DONUT_SIZE /*+ HALF_DONUT_SIZE*/,\r\n                y: this.getRow(donut1) * DONUT_SIZE /*+ HALF_DONUT_SIZE*/\r\n            },\r\n            SWAP_SPEED,\r\n            Phaser.Easing.Linear.None,\r\n            true);\r\n        let donut2Tween = this.add.tween(\r\n            this.matrix[this.getRow(donut2)][this.getCol(donut2)]).to({\r\n                x: this.getCol(donut2) * DONUT_SIZE /*+ HALF_DONUT_SIZE*/,\r\n                y: this.getRow(donut2) * DONUT_SIZE /*+ HALF_DONUT_SIZE*/\r\n            },\r\n            SWAP_SPEED,\r\n            Phaser.Easing.Linear.None,\r\n            true);\r\n        //after animation complete match donuts\r\n        donut2Tween.onComplete.add(() => {\r\n            console.log('this.matchAll', this.matchAll());\r\n            if (!this.matchAll() && swapBack) {\r\n                this.swap(donut1, donut2, false);\r\n            } else {\r\n                if (this.matchAll()) {\r\n                    this.handleMatches();\r\n                    this.updateTimer(2);\r\n                    this.updateScore();\r\n                } else {\r\n                    this.resumeGame();\r\n                    this.selected.donut = null;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    matchByRow(i, j) {\r\n        //find donuts with the same color in a row\r\n        return this.getFromMatrix(i, j).key === this.getFromMatrix(i, j - 1).key &&\r\n            this.getFromMatrix(i, j).key === this.getFromMatrix(i, j - 2).key;\r\n    }\r\n\r\n    matchByColumn(i, j) {\r\n        //find donuts with the same color in a column\r\n        return this.getFromMatrix(i, j).key === this.getFromMatrix(i - 1, j).key &&\r\n            this.getFromMatrix(i, j).key === this.getFromMatrix(i - 2, j).key;\r\n    }\r\n\r\n    match(i, j) {\r\n        //collect all matches\r\n        return this.matchByRow(i, j) || this.matchByColumn(i, j);\r\n    }\r\n\r\n    matchAll() {\r\n        //find matches at the board\r\n        for (let i = 0; i < DONUTS_NUMBER; i++) {\r\n            for (let j = 0; j < DONUTS_NUMBER; j++) {\r\n                if (this.match(i, j)) {\r\n                    console.log('this.match', i, j);\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    handleMatches() {\r\n        //fill remove array\r\n        /*console.log('this.remove', this);\r\n        console.log('this.remove', this.remove);*/\r\n        this.remove = [];\r\n        for (let i = 0; i < DONUTS_NUMBER; i++) {\r\n            this.remove[i] = [];\r\n            for (let j = 0; j < DONUTS_NUMBER; j++) {\r\n                this.remove[i].push(0);\r\n            }\r\n        }\r\n        this.handleHorizontalMatches();\r\n        this.handleVerticalMatches();\r\n        this.destroy();\r\n    }\r\n\r\n    handleVerticalMatches() {\r\n        //find matched donuts in column\r\n        for (let i = 0; i < DONUTS_NUMBER; i++) {\r\n            let colorStreak = 1;\r\n            let currentColor = '';\r\n            let startStreak = 0;\r\n            for (let j = 0; j < DONUTS_NUMBER; j++) {\r\n                if (this.getFromMatrix(j, i).key === currentColor) {\r\n                    colorStreak++;\r\n                }\r\n                if (this.getFromMatrix(j, i).key !== currentColor || j === DONUTS_NUMBER - 1) {\r\n                    if (colorStreak >= 3) {\r\n                        // console.log(\"VERTICAL :: Length = \" + colorStreak + \" :: Start = (\" + startStreak + \",\" + i + \") :: Color = \" + currentColor);\r\n                        for (let k = 0; k < colorStreak; k++) {\r\n                            this.remove[startStreak + k][i]++;\r\n                        }\r\n                    }\r\n                    startStreak = j;\r\n                    colorStreak = 1;\r\n                    currentColor = this.getFromMatrix(j, i).key;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    handleHorizontalMatches() {\r\n        //find matched donuts in row\r\n        for (let i = 0; i < DONUTS_NUMBER; i++) {\r\n            let colorStreak = 1;\r\n            let currentColor = '';\r\n            let startStreak = 0;\r\n            for (let j = 0; j < DONUTS_NUMBER; j++) {\r\n                if (this.getFromMatrix(j, i).key === currentColor) {\r\n                    colorStreak++;\r\n                }\r\n                if (this.getFromMatrix(j, i).key !== currentColor || j === DONUTS_NUMBER - 1) {\r\n                    if (colorStreak >= 3) {\r\n                        // console.log(\"HORIZONTAL :: Length = \" + colorStreak + \" :: Start = (\" + i + \",\" + startStreak + \") :: Color = \" + currentColor);\r\n                        for (let k = 0; k < colorStreak; k++) {\r\n                            this.remove[i][startStreak + k]++;\r\n                        }\r\n                    }\r\n                    startStreak = j;\r\n                    colorStreak = 1;\r\n                    currentColor = this.getFromMatrix(j, i).key;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        //remove all donuts, flagged at remove array\r\n        console.log('destroying');\r\n        // console.log('this.remove', this.remove);\r\n        let destroyed = 0;\r\n        for (let i = 0; i < DONUTS_NUMBER; i++) {\r\n            for (let j = 0; j < DONUTS_NUMBER; j++) {\r\n                // console.log('this.remove[i][j]', this.remove[i][j], i, j);\r\n\r\n                if (this.remove[i][j] > 0) {\r\n                    //removing animation\r\n                    let destroyTween = this.add.tween(\r\n                        this.matrix[i][j]).to({\r\n                            alpha: 0\r\n                        },\r\n                        DESTROY_SPEED,\r\n                        Phaser.Easing.Linear.None,\r\n                        true);\r\n                    destroyed++;\r\n                    //after animation complete, destroy donut\r\n                    destroyTween.onComplete.add(donut => {\r\n                        donut.destroy();\r\n                        destroyed--;\r\n                        if (destroyed === 0) {\r\n                            this.fall();\r\n                            if (this.fastFall) {\r\n                                this.respawn();\r\n                            }\r\n                        }\r\n                    });\r\n                    this.matrix[i][j] = null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    fall() {\r\n        //move down donuts\r\n        let fallen = 0;\r\n        let restart = false;\r\n        for (let i = DONUTS_NUMBER - 1; i >= 0; i--) {\r\n            for (let j = 0; j < DONUTS_NUMBER; j++) {\r\n                if (this.matrix[i][j] != null) {\r\n                    let fallTiles = this.holesBelow(i, j);\r\n                    if (fallTiles > 0) {\r\n                        if (!this.fastFall && fallTiles > 1) {\r\n                            fallTiles = 1;\r\n                            restart = true;\r\n                        }\r\n                        let donut2Tween = this.add.tween(this.matrix[i][j]).to({\r\n                            y: this.matrix[i][j].y + fallTiles * DONUT_SIZE\r\n                        }, FALL_SPEED, Phaser.Easing.Linear.None, true);\r\n                        fallen++;\r\n                        donut2Tween.onComplete.add(() => {\r\n                            fallen--;\r\n                            if (fallen === 0) {\r\n                                if (restart) {\r\n                                    this.fall();\r\n                                } else {\r\n                                    if (!this.fastFall) {\r\n                                        this.respawn();\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n                        this.matrix[i + fallTiles][j] = this.matrix[i][j];\r\n                        this.matrix[i][j] = null;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (fallen === 0) {\r\n            this.respawn();\r\n        }\r\n    }\r\n\r\n    respawn() {\r\n        //add new donuts instead of destroyed\r\n        let respwaned = 0;\r\n        let restart = false;\r\n        for (let j = 0; j < DONUTS_NUMBER; j++) {\r\n            let emptySpots = this.holesInCol(j);\r\n            if (emptySpots > 0) {\r\n                if (!this.fastFall && emptySpots > 1) {\r\n                    emptySpots = 1;\r\n                    restart = true;\r\n                }\r\n                for (let i = 0; i < emptySpots; i++) {\r\n                    let donut = this.donuts.create(DONUT_SIZE * j + DONUT_SIZE / 2, -(DONUT_SIZE * (emptySpots - 1 - i) + DONUT_SIZE / 2), GameState.getRandomDonut());\r\n                    donut.anchor.set(0.5);\r\n                    this.donuts.add(donut);\r\n                    this.matrix[i][j] = donut;\r\n\r\n                    let donut2Tween = this.add.tween(this.matrix[i][j]).to({\r\n                        y: DONUT_SIZE * i + HALF_DONUT_SIZE + OFFSET\r\n                    }, FALL_SPEED, Phaser.Easing.Linear.None, true);\r\n                    respwaned++;\r\n                    donut2Tween.onComplete.add(() => {\r\n                        respwaned--;\r\n                        if (respwaned === 0) {\r\n                            if (restart) {\r\n                                this.fall();\r\n                            } else {\r\n                                if (this.matchAll()) {\r\n                                    setTimeout(() => {this.handleMatches();}, 250);\r\n                                    /*Problem with context\r\n                                    this.time.events.add(250, this.handleMatches);*/\r\n                                } else {\r\n                                    this.resumeGame();\r\n                                    this.selected.donut = null;\r\n                                }\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    holesBelow(row, col) {\r\n        //count holes below donut at position\r\n        let result = 0;\r\n        for (let i = row + 1; i < DONUTS_NUMBER; i++) {\r\n            if (this.matrix[i][col] === null) {\r\n                result++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    holesInCol(col) {\r\n        //count holes in column\r\n        let result = 0;\r\n        for (let i = 0; i < DONUTS_NUMBER; i++) {\r\n            if (this.matrix[i][col] === null) {\r\n                result++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    getFromMatrix(i, j) {\r\n        //get donut from matrix\r\n        return (i >= 0 && i < DONUTS_NUMBER && j >= 0 && j < DONUTS_NUMBER)? this.matrix[i][j] : -1;\r\n        /*if (i < 0 || i >= DONUTS_NUMBER || j < 0 || j >= DONUTS_NUMBER) {\r\n            return -1;\r\n        }\r\n        return this.matrix[i][j];*/\r\n    }\r\n\r\n    pauseGame() {\r\n        this.inputEnabled = false;\r\n        this.timer.pause();\r\n    }\r\n\r\n    resumeGame() {\r\n        this.inputEnabled = true;\r\n        this.timer.resume();\r\n    }\r\n\r\n    updateScore() {\r\n        this.score++;\r\n        this.textScore.text = this.score;\r\n    }\r\n\r\n    updateTimer(seconds) {\r\n        let newDuration = this.timer.duration + seconds * 1000;\r\n        this.timer.stop();\r\n        this.timer.loop(newDuration, this.timeUp, this);\r\n        this.timer.start();\r\n    }\r\n\r\n    timeUp() {\r\n        console.log('time up!');\r\n        this.timer.stop();\r\n        this.inputEnabled = false;\r\n        let timeup = this.add.image(GAME_WIGTH / 2, GAME_HEIGHT / 2, 'text-timeup');\r\n        timeup.anchor.set(0.5);\r\n        this.showGameOver();\r\n    }\r\n\r\n    showGameOver() {\r\n        let gameOver = this.add.text(GAME_WIGTH / 2, GAME_HEIGHT / 2 + 300,\r\n            `Game is over, your score is ${this.score}`,\r\n            {font: \"65px 700 Arial\", fill: \"#2b0203\", align: \"right\",});\r\n        gameOver.anchor.set(0.5);\r\n    }\r\n\r\n    static showTimeInSeconds(timer) {\r\n        return Math.ceil(timer.duration / 1000);\r\n    }\r\n\r\n\r\n    static getRandomDonut() {\r\n        const randomDonut = Math.floor(Math.random() * (DONUTS.length));\r\n        return DONUTS[randomDonut];\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default GameState;\r\n"
  ]
}